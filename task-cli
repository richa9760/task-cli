#!/usr/bin/env python3
import json
import sys
from pathlib import Path
from datetime import datetime

# Constants
TASKS_FILE = Path("tasks.json")

# Utility functions
def load_tasks():
    if TASKS_FILE.exists():
        with open(TASKS_FILE, "r") as f:
            return json.load(f)
    return []

def save_tasks(tasks):
    with open(TASKS_FILE, "w") as f:
        json.dump(tasks, f, indent=4)

def get_current_time():
    return datetime.now().isoformat()

def add_task(description):
    tasks = load_tasks()
    new_task = {
        "id": len(tasks) + 1,
        "description": description,
        "status": "todo",
        "createdAt": get_current_time(),
        "updatedAt": get_current_time(),
    }
    tasks.append(new_task)
    save_tasks(tasks)
    print(f"Task added: {description}")

def update_task(task_id, description):
    tasks = load_tasks()
    for task in tasks:
        if task["id"] == task_id:
            task["description"] = description
            task["updatedAt"] = get_current_time()
            save_tasks(tasks)
            print(f"Task {task_id} updated.")
            return
    print(f"Task {task_id} not found.")

def delete_task(task_id):
    tasks = load_tasks()
    updated_tasks = [task for task in tasks if task["id"] != task_id]
    if len(tasks) == len(updated_tasks):
        print(f"Task {task_id} not found.")
    else:
        save_tasks(updated_tasks)
        print(f"Task {task_id} deleted.")

def update_status(task_id, status):
    if status not in ["todo", "in-progress", "done"]:
        print("Invalid status. Use 'todo', 'in-progress', or 'done'.")
        return

    tasks = load_tasks()
    for task in tasks:
        if task["id"] == task_id:
            task["status"] = status
            task["updatedAt"] = get_current_time()
            save_tasks(tasks)
            print(f"Task {task_id} marked as {status}.")
            return
    print(f"Task {task_id} not found.")

def list_tasks(filter_status=None):
    tasks = load_tasks()
    if filter_status:
        tasks = [task for task in tasks if task["status"] == filter_status]
    if not tasks:
        print("No tasks found.")
    else:
        for task in tasks:
            print(
                f"[{task['id']}] {task['description']} - {task['status']} "
                f"(Created: {task['createdAt']}, Updated: {task['updatedAt']})"
            )

# Command handling
def main():
    if len(sys.argv) < 2:
        print("Usage: task-cli <command> [options]")
        return

    command = sys.argv[1]
    if command == "add" and len(sys.argv) == 3:
        add_task(sys.argv[2])
    elif command == "update" and len(sys.argv) == 4:
        update_task(int(sys.argv[2]), sys.argv[3])
    elif command == "delete" and len(sys.argv) == 3:
        delete_task(int(sys.argv[2]))
    elif command == "mark" and len(sys.argv) == 4:
        update_status(int(sys.argv[2]), sys.argv[3])
    elif command == "list" and len(sys.argv) == 2:
        list_tasks()
    elif command == "list-todo" and len(sys.argv) == 2:
        list_tasks("todo")
    elif command == "list-in-progress" and len(sys.argv) == 2:
        list_tasks("in-progress")
    elif command == "list-done" and len(sys.argv) == 2:
        list_tasks("done")
    else:
        print("Invalid command or arguments.")

if __name__ == "__main__":
    main()
